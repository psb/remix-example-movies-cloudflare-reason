;; `dirs` is a stanza to tell dune which subfolders from the current folder
;; (where the `dune` file is) it should process.
;; `:standard` is part of Dune's predicate language: https://dune.readthedocs.io/en/stable/reference/predicate-language.html#predicate-language
;; In the case of `dirs` stanza, `:standard` means "Process all subdirs, except those starting with underscore"
;; `\` operator will exclude the next value defined set.

;; With that in mind, we start by ignoring `node_modules`, because in most cases
;; there should be no `dune` files to be processed there by Dune.
;; If you need to consume an OCaml project from `node_modules`, this should work:
;; - remove the `dirs` stanza below
;; - add a `(subdir node_modules (dirs only_your_package))`

(dirs :standard \ node_modules)

; (env
;  (dev
;   (flags
;    (:standard -warn-error -69-32-26))))

(melange.emit
 (target output)
 (alias react)
 (libraries app)
 (module_systems es6))

(rule
 (alias promote-app)
 (mode
  (promote (until-clean)))
 (deps
  (alias_rec react))
 (targets
  (dir app))
 (action
  (progn
   (bash "mkdir -p app")
   (bash "cp -r output/reason_app/* app"))))

(rule
 (alias promote-node-modules)
 (mode
  (promote (until-clean)))
 (deps
  (alias_rec react))
 (targets
  (dir node_modules))
 (action
  (progn
   (bash "mkdir -p node_modules")
   (bash "cp -r output/node_modules/* node_modules"))))
