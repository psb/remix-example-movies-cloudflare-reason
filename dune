;; `dirs` is a stanza to tell dune which subfolders from the current folder
;; (where the `dune` file is) it should process.
;; `:standard` is part of Dune's predicate language: https://dune.readthedocs.io/en/stable/reference/predicate-language.html#predicate-language
;; In the case of `dirs` stanza, `:standard` means "Process all subdirs, except those starting with underscore"
;; `\` operator will exclude the next value defined set.

;; With that in mind, we start by ignoring `node_modules`, because in most cases
;; there should be no `dune` files to be processed there by Dune.
;; If you need to consume an OCaml project from `node_modules`, this should work:
;; - remove the `dirs` stanza below
;; - add a `(subdir node_modules (dirs only_your_package))`

(dirs :standard \ node_modules)

; (melange.emit
;  (target output)
;  (alias nextjs)
;  (module_systems es6)
;  (libraries app bindings api))

; (env
;  (dev
;   (flags
;    (:standard -warn-error -69-32-26))))

(melange.emit
 (target output)
 (alias react)
 (libraries app)
 (module_systems es6))

; (melange.emit
;  (target node_output)
;  (alias node)
;  (libraries netlify)
;  (module_systems es6))

; (rule
;  (alias promote-app)
;  (mode
;   (promote (until-clean)))
;  (deps
;   (alias_rec react))
;  (targets
;   (dir src))
;  (action
;   (progn
;    (bash "mkdir -p src/reason")
;    (bash "cp -r app_output/reason_app/components src/reason")
;    (bash "cp -r app_output/reason_app/bindings src/reason")
;    (bash "cp -r app_output/node_modules src/reason"))))

; (rule
;  (alias promote-netlify)
;  (mode
;   (promote (until-clean)))
;  (deps
;   (alias_rec node))
;  (targets
;   (dir netlify))
;  (action
;   (progn
;    (bash "mkdir -p netlify/functions")
;    (bash "cp -r node_output/reason_netlify_functions/*.* netlify/functions/")
;    (bash "cp -r node_output/node_modules netlify"))))
